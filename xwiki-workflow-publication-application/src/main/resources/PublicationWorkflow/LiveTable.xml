<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>PublicationWorkflow</web>
<name>LiveTable</name>
<language></language>
<defaultLanguage>fr</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>xwiki:XWiki.fveron</creator>
<author>xwiki:XWiki.fveron</author>
<customClass></customClass>
<contentAuthor>xwiki:XWiki.fveron</contentAuthor>
<creationDate>1364305708000</creationDate>
<date>1367855490000</date>
<contentUpdateDate>1367855490000</contentUpdateDate>
<version>4.2</version>
<title>$msg.get("workflow.livetable.title")</title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>true</minorEdit>
<syntaxId>xwiki/2.1</syntaxId>
<hidden>false</hidden>
<content>{{velocity}}
  ## Initialize workflow document list
  #set($contributingList = [])
  #set($moderatingList = [])
  #set($validatingList = [])
  #set($allWorkflowList = [])
  ## Get all groups used by the workflows
  #set($userGroups = $services.publicationroles.getAllGroups($xcontext.userReference, true))
  ########################
  ## Prepare Livetable Queries
  ##
  ## Get a list of groups used by the WorkflowApplication
  #set($hql = "select obj.name from BaseObject obj where obj.className='PublicationWorkflow.PublicationWorkflowConfigClass'")
  #set($results = $xwiki.search($hql))
  ## results in a list of workflowConfig
  #foreach ($item in $results)
    #set($workflowConfigDoc = $xwiki.getDocument($item))
    #set($workflowConfigObject = $workflowConfigDoc.getObject('PublicationWorkflow.PublicationWorkflowConfigClass'))
    #set($workflowConfigSrl = $services.model.serialize($services.model.resolveDocument($item, 'explicit', $workflowConfigDoc.documentReference), 'local'))
    ## Check if user is contributor
    #set($contributorGroup = $workflowConfigObject.getProperty('contributor').value)
    #set($contributorGroupRef = $services.model.resolveDocument($contributorGroup, 'explicit', $workflowConfigDoc.documentReference))
    #if($userGroups.contains($services.model.serialize($contributorGroupRef, 'default')) &amp;&amp; !$contributingList.contains($workflowConfigSrl))    
      #set($discard = $contributingList.add($workflowConfigSrl))
    #end
    ## Check if user is moderator
    #set($moderatorGroup = $workflowConfigObject.getProperty('moderator').value)
    #set($moderatorGroupRef = $services.model.resolveDocument($moderatorGroup, 'explicit', $workflowConfigDoc.documentReference))
    #if($userGroups.contains($services.model.serialize($moderatorGroupRef, 'default')) &amp;&amp; !$moderatingList.contains($workflowConfigSrl))    
      #set($discard = $moderatingList.add($workflowConfigSrl))
    #end
    ## Check if user is validator
    #set($validatorGroup = $workflowConfigObject.getProperty('validator').value)
    #set($validatorGroupRef = $services.model.resolveDocument($validatorGroup, 'explicit', $workflowConfigDoc.documentReference))
    #if($userGroups.contains($services.model.serialize($validatorGroupRef, 'default')) &amp;&amp; !$validatingList.contains($workflowConfigSrl))    
      #set($discard = $validatingList.add($workflowConfigSrl))
    #end
    ## All Workflow
    #if(!$allWorkflowList.contains($workflowConfigSrl))    
      #set($discard = $allWorkflowList.add($workflowConfigSrl))
    #end
  #end
  ########################
  ## Display Livetables
  ##
  #set($workflowMap = {'moderating' : $moderatingList, 'validating' : $validatingList, 'valid' : $validatingList, 'userFiles' : $allWorkflowList})
  ## Build livetable parameters
  #foreach($categ in $workflowMap.keySet())
    #if($workflowMap.get($categ).size() &gt; 0)
    ----
      **$msg.get("workflow.livetable.${categ}")**
      #set($extraParams = '')
      ## Set workflow list in param
      #foreach($groupName in $workflowMap.get($categ))
        #set($extraParams = $extraParams + '&amp;workflowList=' + $groupName)
      #end
      ## Set creator in param for user files, status otherwise
      #if($categ == 'userFiles')
        #set($extraParams = $extraParams + '&amp;doc.creator=' + $escapetool.url($xwiki.user.user) + '&amp;istarget=0')
      #else
        #set($extraParams = $extraParams + "&amp;status=${categ}")
      #end
      ## Create livetable
      #set($collist = ['doc.title', 'doc.creationDate', 'doc.creator', 'doc.author', 'status', 'workflow', 'istarget'])
      #set($colprops = {
        'doc.title' : { 'type' : 'text' , 'size' : 30, 'link' : 'view' },
        'doc.creator' : { 'type' : 'hidden'},
        'doc.author' : { 'type' : 'text', 'link' : 'author' },
        'status' : { 'type' : 'list' },
        'istarget' : { 'type' : 'hidden'}
      })
      #set($options = {
        'className' : 'PublicationWorkflow.PublicationWorkflowClass',
        'resultPage' : 'PublicationWorkflow.LiveTableResults',
        'extraParams' : ${extraParams},
        'translationPrefix' : 'workflow.livetable.',
        'rowCount' : 15
      })
      #livetable("WorkflowOverview${categ}" $collist $colprops $options)
    #end
  #end
{{/velocity}}
</content></xwikidoc>